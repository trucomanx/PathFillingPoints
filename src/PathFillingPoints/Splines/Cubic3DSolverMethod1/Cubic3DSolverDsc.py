import numpy as np
from numpy.linalg import norm as Norm

from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverQ import Q00
from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverQ import Q01
from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverQ import Q10
from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverQ import Q11
from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverQ import Q20
from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverQ import Q21
                

from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverPoly import DPoly
from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverPoly import DDPoly

from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverSc import square_curvature0 
from PathFillingPoints.Splines.Cubic3DSolverTools.Cubic3DSolverSc import square_curvature1 

def d_square_curvature0(wn):
    DDP=DDPoly(wn,0);
    DP=DPoly(wn,0);
    S1= 2*( (Norm(DDP)**2)*(Q11.T@DP)+
            (Norm( DP)**2)*(Q21.T@DDP) 
        )/(Norm(DP)**6);
    
    S2=-2*(  np.dot(DP,DDP)*(Q11.T@DDP+Q21.T@DP)
          )/(Norm(DP)**6);
    
    S3=-6*(  square_curvature0(wn)*(Q11.T@DP)
          )/(Norm(DP)**2);
    
    return S1+S2+S3;

def d_square_curvature1(wn):
    DDP=DDPoly(wn,1);
    DP=DPoly(wn,1);
    S1= 2*( (Norm(DDP)**2)*(Q10.T@DP)+
            (Norm( DP)**2)*(Q20.T@DDP) 
        )/(Norm(DP)**6);
    
    S2=-2*(  np.dot(DP,DDP)*(Q10.T@DDP+Q20.T@DP)
          )/(Norm(DP)**6);
    
    S3=-6*(  square_curvature1(wn)*(Q10.T@DP)
          )/(Norm(DP)**2);
    
    return S1+S2+S3;
    

'''
def d_square_curvature0(w):
    dsc=np.zeros(12);
    
    dsc[0]=0;
    
    dsc[1]=(4*w[6]*(2*w[1]*w[6]-2*w[2]*w[5])-4*w[10]*(2*w[2]*w[9]-2*w[1]*w[10]))/(w[9]**2+w[5]**2+w[1]**2)**3-(6*w[1]*((2*w[5]*w[10]-2*w[6]*w[9])**2+(2*w[2]*w[9]-2*w[1]*w[10])**2+(2*w[1]*w[6]-2*w[2]*w[5])**2))/(w[9]**2+w[5]**2+w[1]**2)**4;
    
    dsc[2]=(4*w[9]*(2*w[2]*w[9]-2*w[1]*w[10])-4*w[5]*(2*w[1]*w[6]-2*w[2]*w[5]))/(w[9]**2+w[5]**2+w[1]**2)**3;
    
    dsc[3]=0;
    
    dsc[4]=0;
    
    dsc[5]=(4*w[10]*(2*w[5]*w[10]-2*w[6]*w[9])-4*w[2]*(2*w[1]*w[6]-2*w[2]*w[5]))/(w[9]**2+w[5]**2+w[1]**2)**3-(6*w[5]*((2*w[5]*w[10]-2*w[6]*w[9])**2+(2*w[2]*w[9]-2*w[1]*w[10])**2+(2*w[1]*w[6]-2*w[2]*w[5])**2))/(w[9]**2+w[5]**2+w[1]**2)**4;
    
    dsc[6]=(4*w[1]*(2*w[1]*w[6]-2*w[2]*w[5])-4*w[9]*(2*w[5]*w[10]-2*w[6]*w[9]))/(w[9]**2+w[5]**2+w[1]**2)**3;
    
    dsc[7]=0;
    
    dsc[8]=0;
    
    dsc[9]=(4*w[2]*(2*w[2]*w[9]-2*w[1]*w[10])-4*w[6]*(2*w[5]*w[10]-2*w[6]*w[9]))/(w[9]**2+w[5]**2+w[1]**2)**3-(6*w[9]*((2*w[5]*w[10]-2*w[6]*w[9])**2+(2*w[2]*w[9]-2*w[1]*w[10])**2+(2*w[1]*w[6]-2*w[2]*w[5])**2))/(w[9]**2+w[5]**2+w[1]**2)**4;
    
    dsc[10]=(4*w[5]*(2*w[5]*w[10]-2*w[6]*w[9])-4*w[1]*(2*w[2]*w[9]-2*w[1]*w[10]))/(w[9]**2+w[5]**2+w[1]**2)**3;
    
    dsc[11]=0;
    
    return dsc;



def d_square_curvature1(w):
    dsc=np.zeros(12);
    
    dsc[0]=0;
    
    dsc[1]=(2*((-6*w[11])-2*w[10])*((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))+2*(6*w[7]+2*w[6])*((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(6*(3*w[3]+2*w[2]+w[1])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    dsc[2]=(2*(2*(3*w[11]+2*w[10]+w[9])-2*(6*w[11]+2*w[10]))*((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))+2*(2*(6*w[7]+2*w[6])-2*(3*w[7]+2*w[6]+w[5]))*((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(12*(3*w[3]+2*w[2]+w[1])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    dsc[3]=(2*(6*(3*w[11]+2*w[10]+w[9])-3*(6*w[11]+2*w[10]))*((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))+2*(3*(6*w[7]+2*w[6])-6*(3*w[7]+2*w[6]+w[5]))*((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(18*(3*w[3]+2*w[2]+w[1])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    dsc[4]=0;
    
    dsc[5]=(2*(6*w[11]+2*w[10])*((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))+2*((-6*w[3])-2*w[2])*((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(6*(3*w[7]+2*w[6]+w[5])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    dsc[6]=(2*(2*(6*w[11]+2*w[10])-2*(3*w[11]+2*w[10]+w[9]))*((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))+2*(2*(3*w[3]+2*w[2]+w[1])-2*(6*w[3]+2*w[2]))*((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(12*(3*w[7]+2*w[6]+w[5])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    dsc[7]=(2*(3*(6*w[11]+2*w[10])-6*(3*w[11]+2*w[10]+w[9]))*((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))+2*(6*(3*w[3]+2*w[2]+w[1])-3*(6*w[3]+2*w[2]))*((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(18*(3*w[7]+2*w[6]+w[5])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    dsc[8]=0;
    
    dsc[9]=(2*((-6*w[7])-2*w[6])*((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))+2*(6*w[3]+2*w[2])*((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(6*(3*w[11]+2*w[10]+w[9])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    dsc[10]=(2*(2*(3*w[7]+2*w[6]+w[5])-2*(6*w[7]+2*w[6]))*((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))+2*(2*(6*w[3]+2*w[2])-2*(3*w[3]+2*w[2]+w[1]))*((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(12*(3*w[11]+2*w[10]+w[9])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    dsc[11]=(2*(6*(3*w[7]+2*w[6]+w[5])-3*(6*w[7]+2*w[6]))*((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))+2*(3*(6*w[3]+2*w[2])-6*(3*w[3]+2*w[2]+w[1]))*((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10])))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**3-(18*(3*w[11]+2*w[10]+w[9])*(((3*w[7]+2*w[6]+w[5])*(6*w[11]+2*w[10])-(6*w[7]+2*w[6])*(3*w[11]+2*w[10]+w[9]))**2+((6*w[3]+2*w[2])*(3*w[11]+2*w[10]+w[9])-(3*w[3]+2*w[2]+w[1])*(6*w[11]+2*w[10]))**2+((3*w[3]+2*w[2]+w[1])*(6*w[7]+2*w[6])-(6*w[3]+2*w[2])*(3*w[7]+2*w[6]+w[5]))**2))/((3*w[11]+2*w[10]+w[9])**2+(3*w[7]+2*w[6]+w[5])**2+(3*w[3]+2*w[2]+w[1])**2)**4;
    
    return dsc;


'''


def d_square_curvature(W,Nc):
    dK=np.zeros(W.shape);
    N=1+int(W.size/Nc);
    
    for i in range(N-1):
        S=d_square_curvature0(W[(i*Nc):(i*Nc+Nc),0])
        +d_square_curvature1(W[(i*Nc):(i*Nc+Nc),0]);
        dK[(i*Nc):(i*Nc+Nc),0]=S/(2.0*(N-1));
    
    return dK;
